#!/bin/bash

echo "üîç Test Temps R√©el Apple Pay - HeritageParfums"
echo "============================================="
echo ""

echo "Ce script vous aide √† tester Apple Pay et voir les r√©sultats imm√©diatement."
echo ""

# Fonction pour afficher les derni√®res commandes
show_recent_orders() {
    echo "üìã Derni√®res commandes Apple Pay:"
    echo "================================="
    
    php -r "
    require 'vendor/autoload.php';
    \$app = require 'bootstrap/app.php';
    \$kernel = \$app->make(Illuminate\Contracts\Console\Kernel::class);
    \$kernel->bootstrap();
    
    \$orders = \App\Models\Order::where('payment_method', 'apple_pay')
        ->orderBy('created_at', 'desc')
        ->limit(3)
        ->get();
    
    if (\$orders->count() == 0) {
        echo '‚ö†Ô∏è  Aucune commande Apple Pay trouv√©e\n\n';
        return;
    }
    
    foreach (\$orders as \$i => \$order) {
        echo 'üõçÔ∏è  Commande #' . (\$i + 1) . ': ' . \$order->order_number . '\n';
        echo 'üë§ Client: ' . \$order->customer_name . ' (' . \$order->customer_email . ')\n';
        echo 'üìç Adresse: ' . \$order->shipping_address_line_1 . ', ' . \$order->shipping_city . ' ' . \$order->shipping_postal_code . '\n';
        echo 'üí∞ Montant: ' . \$order->total_amount . '‚Ç¨\n';
        echo 'üìÖ Date: ' . \$order->created_at->format('d/m/Y H:i:s') . '\n';
        
        // V√©rifier la qualit√© des donn√©es
        \$issues = [];
        if (\$order->customer_name === 'Temp Customer') \$issues[] = 'Nom temporaire';
        if (\$order->customer_email === 'temp@example.com') \$issues[] = 'Email temporaire';
        if (\$order->shipping_address_line_1 === 'Temp Address') \$issues[] = 'Adresse temporaire';
        if (\$order->shipping_city === 'Temp City') \$issues[] = 'Ville temporaire';
        
        if (empty(\$issues)) {
            echo '‚úÖ Donn√©es PARFAITES !\n';
        } else {
            echo '‚ùå PROBL√àMES: ' . implode(', ', \$issues) . '\n';
        }
        echo '\n';
    }
    "
}

# Fonction pour surveiller les logs
monitor_logs() {
    echo "üìä Surveillance des logs Apple Pay..."
    echo "===================================="
    echo ""
    
    # Compter les logs Apple Pay
    total_logs=$(grep -c "Apple Pay" storage/logs/laravel.log 2>/dev/null || echo "0")
    echo "üìà Total logs Apple Pay: $total_logs"
    
    # Logs d'aujourd'hui
    today=$(date +%Y-%m-%d)
    today_logs=$(grep "$today" storage/logs/laravel.log 2>/dev/null | grep -c "Apple Pay" || echo "0")
    echo "üìÖ Logs aujourd'hui: $today_logs"
    
    # Derniers logs
    echo ""
    echo "üîç Derniers logs Apple Pay:"
    echo "------------------------"
    grep "Apple Pay" storage/logs/laravel.log 2>/dev/null | tail -3 | while read line; do
        if [[ $line == *"SUCCESS"* ]] || [[ $line == *"Transaction Success"* ]]; then
            echo "‚úÖ $line"
        elif [[ $line == *"ERROR"* ]] || [[ $line == *"error"* ]]; then
            echo "‚ùå $line"
        else
            echo "‚ÑπÔ∏è  $line"
        fi
    done
    echo ""
}

# Menu principal
while true; do
    echo "üéØ QUE VOULEZ-VOUS FAIRE ?"
    echo "========================="
    echo "1. üìã Voir les derni√®res commandes Apple Pay"
    echo "2. üìä Surveiller les logs"
    echo "3. üîÑ Actualiser (voir les deux)"
    echo "4. üß™ Afficher les infos de test"
    echo "5. üöÄ Lancer le monitoring continu"
    echo "6. ‚ùå Quitter"
    echo ""
    read -p "Votre choix (1-6): " choice
    
    case $choice in
        1)
            clear
            show_recent_orders
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
            clear
            ;;
        2)
            clear
            monitor_logs
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
            clear
            ;;
        3)
            clear
            show_recent_orders
            monitor_logs
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
            clear
            ;;
        4)
            clear
            echo "üß™ INFORMATIONS DE TEST"
            echo "======================"
            echo ""
            echo "üì± Pour tester Apple Pay:"
            echo "1. Utilisez un appareil Apple (iPhone, iPad, Mac avec Touch ID/Face ID)"
            echo "2. Allez sur votre site en HTTPS"
            echo "3. Choisissez un produit et cliquez 'Acheter avec Apple Pay'"
            echo "4. Compl√©tez la transaction"
            echo "5. Revenez ici et choisissez l'option 3 pour voir les r√©sultats"
            echo ""
            echo "üîó Routes de debug disponibles:"
            echo "- GET /debug/apple-pay-orders (voir toutes les commandes)"
            echo "- POST /debug/apple-pay (test des donn√©es)"
            echo ""
            echo "üìä Logs √† surveiller:"
            echo "- 'Apple Pay Transaction Success' = ‚úÖ Succ√®s"
            echo "- 'Apple Pay processing error' = ‚ùå Erreur"
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
            clear
            ;;
        5)
            clear
            echo "üöÄ MONITORING CONTINU"
            echo "===================="
            echo ""
            echo "Surveillance des logs Apple Pay en temps r√©el..."
            echo "Appuyez sur Ctrl+C pour arr√™ter"
            echo ""
            
            # Monitoring continu
            tail -f storage/logs/laravel.log | grep --line-buffered "Apple Pay" | while read line; do
                timestamp=$(date '+%H:%M:%S')
                if [[ $line == *"SUCCESS"* ]] || [[ $line == *"Transaction Success"* ]]; then
                    echo "[$timestamp] ‚úÖ $line"
                elif [[ $line == *"ERROR"* ]] || [[ $line == *"error"* ]]; then
                    echo "[$timestamp] ‚ùå $line"
                else
                    echo "[$timestamp] ‚ÑπÔ∏è  $line"
                fi
            done
            
            clear
            ;;
        6)
            echo ""
            echo "‚ú® Merci d'avoir utilis√© le testeur Apple Pay !"
            echo ""
            echo "üìã RAPPEL: Apr√®s un test r√©ussi avec de vraies donn√©es,"
            echo "   n'oubliez pas de supprimer les routes de debug en production."
            echo ""
            exit 0
            ;;
        *)
            echo "‚ùå Choix invalide. Utilisez 1-6."
            sleep 1
            clear
            ;;
    esac
done
