<?php

/**
 * Script de test pour vérifier que la correction Apple Pay fonctionne
 * 
 * À exécuter depuis le répertoire Laravel : php test_apple_pay.php
 */

require_once 'vendor/autoload.php';

// Charger Laravel
$app = require_once 'bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use App\Models\Product;
use App\Models\Order;
use App\Http\Controllers\PaymentController;
use Illuminate\Http\Request;

echo "🧪 Test de la correction Apple Pay\n";
echo "=================================\n\n";

try {
    // 1. Vérifier qu'il y a des produits
    $product = Product::where('stock', '>', 0)->first();
    
    if (!$product) {
        echo "❌ Aucun produit en stock trouvé\n";
        exit(1);
    }
    
    echo "✅ Produit de test trouvé: {$product->name} (Stock: {$product->stock})\n";
    
    // 2. Simuler une requête Apple Pay
    $request = new Request([
        'product_id' => $product->id,
        'quantity' => 1,
        'payment_method' => 'apple_pay_stripe'
    ]);
    
    // 3. Tester la création de session (sans vraiment appeler Stripe)
    echo "🔄 Simulation de la création d'une commande temporaire...\n";
    
    $subtotal = $product->current_price * 1;
    $taxAmount = $subtotal * 0.20;
    $shippingAmount = $subtotal >= 150 ? 0 : 9.90;
    $total = $subtotal + $taxAmount + $shippingAmount;
    
    // Tester la création d'ordre avec tous les champs requis
    $order = Order::create([
        'order_number' => Order::generateOrderNumber(),
        'status' => 'pending',
        'payment_status' => 'pending',
        'payment_method' => 'apple_pay_stripe',
        'customer_email' => 'test@example.com',
        'customer_name' => 'Test Customer',
        'customer_phone' => null,
        // Champs d'adresse requis
        'billing_address_line_1' => 'Test Address',
        'billing_address_line_2' => null,
        'billing_city' => 'Test City',
        'billing_postal_code' => '12345',
        'billing_country' => 'FR',
        'shipping_address_line_1' => 'Test Address',
        'shipping_address_line_2' => null,
        'shipping_city' => 'Test City',
        'shipping_postal_code' => '12345',
        'shipping_country' => 'FR',
        'shipping_carrier' => 'colissimo',
        'shipping_method' => $shippingAmount == 0 ? 'Gratuite' : 'Express',
        'subtotal' => $subtotal,
        'tax_amount' => $taxAmount,
        'shipping_amount' => $shippingAmount,
        'total_amount' => $total,
        'currency' => 'EUR',
    ]);
    
    echo "✅ Commande temporaire créée avec succès: {$order->order_number}\n";
    echo "   - Sous-total: {$subtotal}€\n";
    echo "   - TVA: {$taxAmount}€\n";
    echo "   - Livraison: {$shippingAmount}€\n";
    echo "   - Total: {$total}€\n\n";
    
    // 4. Nettoyer (supprimer la commande de test)
    $order->delete();
    echo "✅ Commande de test supprimée\n\n";
    
    // 5. Vérifier la configuration Stripe
    echo "🔧 Vérification de la configuration Stripe...\n";
    $stripeKey = config('stripe.secret_key');
    if ($stripeKey && str_starts_with($stripeKey, 'sk_')) {
        echo "✅ Clé Stripe configurée\n";
    } else {
        echo "⚠️  Clé Stripe non configurée ou invalide\n";
    }
    
    // 6. Vérifier la configuration Apple Pay
    echo "🍎 Vérification de la configuration Apple Pay...\n";
    $merchantId = config('apple-pay.merchant_identifier');
    $domain = config('apple-pay.domain_name');
    echo "   - Merchant ID: {$merchantId}\n";
    echo "   - Domaine: {$domain}\n";
    
    $certPath = storage_path('apple-pay/merchant_id.pem');
    $keyPath = storage_path('apple-pay/merchant_id.key');
    
    if (file_exists($certPath) && file_exists($keyPath)) {
        echo "✅ Certificats Apple Pay trouvés\n";
    } else {
        echo "⚠️  Certificats Apple Pay manquants (normal en développement)\n";
        echo "   - Cert: " . ($certPath ? "❌" : "✅") . "\n";
        echo "   - Key: " . ($keyPath ? "❌" : "✅") . "\n";
    }
    
    echo "\n🎉 RÉSULTAT: La correction devrait résoudre l'erreur de création de session !\n";
    echo "\n📝 PROCHAINES ÉTAPES:\n";
    echo "1. Tester Apple Pay dans le navigateur\n";
    echo "2. Vérifier les logs en cas d'erreur: storage/logs/laravel.log\n";
    echo "3. S'assurer que l'environnement est en HTTPS pour Apple Pay\n";
    
} catch (\Exception $e) {
    echo "❌ ERREUR: " . $e->getMessage() . "\n";
    echo "📍 Fichier: " . $e->getFile() . ":" . $e->getLine() . "\n";
    exit(1);
}
